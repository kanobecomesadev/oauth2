#Models.py


class DiscordUser(models.Model):
    objects = DiscordUserOAuthManager()

    id = models.BigIntegerField(primary_key=True)
    discord_tag = models.CharField(max_length=100)
    avatar = models.CharField(max_length=100)
    public_flags = models.IntegerField()
    flags = models.IntegerField()
    locale = models.CharField(max_length=100)
    mfa_enabled = models.BooleanField()
    last_login = models.DateTimeField(null = True)

    def is_authenticated(self,request):
        return True

#managers.py


class DiscordUserOAuthManager(models.UserManager):
    def create_new_discord_user(self, user):
        print('Inside Discord User Manager')
        discord_tag = f"{user['username']}#{user['discriminator']}"
        if user["avatar"]:

            new_user = self.create(
                id = user['id'],
                avatar = user['avatar'],
                public_flags = user['public_flags'],
                flags = user['flags'],
                locale = user['locale'],
                mfa_enabled = user['mfa_enabled'],
                discord_tag = discord_tag,
            )
        else:
            new_user = self.create(
                id = user['id'],
                public_flags = user['public_flags'],
                flags = user['flags'],
                locale = user['locale'],
                mfa_enabled = user['mfa_enabled'],
                discord_tag = discord_tag,
            )
        return new_user


#auth.py


class DiscordAuthenticationBackend(BaseBackend):
    def authenticate(self, request, user) -> DiscordUser:
        find_user = DiscordUser.objects.filter(id = user['id'])
        print(find_user)
        print(user)
        if len(find_user) == 0:
            print("User not found, saving")
            new_user = DiscordUser.objects.create_new_discord_user(user)
            print(new_user)
            return new_user
        else:
            print("User found!!!!")
            new_user = DiscordUser.objects.update_or_create(id = user['id'], defaults= {
                'avatar': user['avatar'],
                'discord_tag': f"{user['username']}#{user['discriminator']}"},
                )[0]
            print(new_user)
            return new_user
    
    def get_user(self, user_id):
        try:
            return DiscordUser.objects.get(pk = user_id)
        except DiscordUser.DoesNotExist:
            return None
            
#views.py



auth_url_discord = "https://discord.com/api/oauth2/authorize?client_id=995058502340980736&redirect_uri=http%3A%2F%2Flocalhost%3A8000%2Foauth2%2Flogin%2Fredirect&response_type=code&scope=identify%20guilds"

def paypalcomplete(request:HttpRequest):
    body = json.loads(request.body)
    print("BODY:",body)
    id = request.session['userid']
    print(id)
    return JsonResponse(body)

@login_required(login_url = "/oauth2/login")
def get_authenticated_user(request: HttpRequest):
    user = request.user
    context = {
        "id" : user.id,
        "avatar": user.avatar,
        "public_flags" : user.public_flags,
        "flags" : user.flags,
        "locale" : user.locale,
        "mfa_enabled" : user.mfa_enabled,
        "discord_tag" : user.discord_tag,
    }
    request.session['userid'] = user.id

    print(user.id)
    return render(request,"paypal.html", context=context)

    
async def discord_login(request : HttpRequest):
    return redirect(auth_url_discord)

def discord_login_redirect(request: HttpRequest):

    code = request.GET.get('code')
    print(f"code:{code}")
    user = exchange_code(code)
    discord_user = authenticate(request, user = user)
    if isinstance(discord_user, Iterable): 
        discord_user = list(discord_user).pop()
    login(request, discord_user)
    return redirect("/oauth2/user")

def exchange_code(code:str):
    REDIRECT_URI = "http://localhost:8000/oauth2/login/redirect"
    CLIENT_SECRET = "9P5yy9-BvmevjWF4hoDa_uv3-jCSUdKJ"
    CLIENT_ID = "995058502340980736"
    data = {
        'client_id': CLIENT_ID,
        'client_secret': CLIENT_SECRET,
        'grant_type': 'authorization_code',
        'code': code,
        'redirect_uri': REDIRECT_URI
    }

    headers = {
        'Content-Type': 'application/x-www-form-urlencoded'
    }
    
    print("yes")
    response = requests.post("https://discord.com/api/oauth2/token", data = data, headers=headers)
    response.raise_for_status() 

    credentials = response.json()
    print(credentials)

    access_token = credentials['access_token']
    response = requests.get("https://discord.com/api/v6/users/@me", headers={
        'Authorization': f'Bearer {access_token}'
    })
    print(response)
    user = response.json()
    return user

